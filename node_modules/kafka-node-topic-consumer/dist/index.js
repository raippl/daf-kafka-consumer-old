'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sourceMapSupport = require('source-map-support');

var _sourceMapSupport2 = _interopRequireDefault(_sourceMapSupport);

var _async = require('async');

var _async2 = _interopRequireDefault(_async);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _fastq = require('fastq');

var _fastq2 = _interopRequireDefault(_fastq);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _kafkaNode = require('kafka-node');

var _kafkaNode2 = _interopRequireDefault(_kafkaNode);

var _ms = require('ms');

var _ms2 = _interopRequireDefault(_ms);

var _retry = require('retry');

var _retry2 = _interopRequireDefault(_retry);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

_sourceMapSupport2.default.install();

var Client = _kafkaNode2.default.Client,
    HighLevelConsumer = _kafkaNode2.default.HighLevelConsumer;

var TopicConsumer = function (_EventEmitter) {
  _inherits(TopicConsumer, _EventEmitter);

  function TopicConsumer(options) {
    _classCallCheck(this, TopicConsumer);

    // validate options
    var _this = _possibleConstructorReturn(this, (TopicConsumer.__proto__ || Object.getPrototypeOf(TopicConsumer)).call(this));

    var optionsSchema = _joi2.default.object({
      concurrency: _joi2.default.number().integer().min(1).default(1),
      consumer: _joi2.default.object({
        groupId: _joi2.default.string().required()
      }).required(),
      host: _joi2.default.string(),
      parse: _joi2.default.func(),
      rebuild: _joi2.default.object({
        closing: _joi2.default.object({}).description('valid node-retry options'),
        minDelay: _joi2.default.alternatives().try(_joi2.default.string(), _joi2.default.number().integer().min(0)),
        maxDelay: _joi2.default.alternatives().try(_joi2.default.string(), _joi2.default.number().integer().min(0))
      }).default({ minDelay: '35s', maxDelay: '2m' }),
      topic: _joi2.default.alternatives().try(_joi2.default.string(), _joi2.default.object({
        topic: _joi2.default.string()
      })).required(),
      validate: _joi2.default.func().arity(1)
    }).or('host', 'client').unknown(true).required();

    _this.options = _joi2.default.attempt(options, optionsSchema);
    var _this$options = _this.options,
        concurrency = _this$options.concurrency,
        consumerOptions = _this$options.consumer,
        topic = _this$options.topic;

    _this.parse = _this.options.parse;
    _this.validate = _this.options.validate;
    _this._fetchPayloads = (0, _lodash.isObject)(topic) ? [topic] : [{ topic: topic }];
    _this._consumerOptions = (0, _lodash.defaults)(consumerOptions, {
      autoCommit: false,
      paused: true
    });
    _this.workers = [];

    _this._configureConsumer();
    _this._configureQueue(concurrency);
    return _this;
  }

  /**
   * Configure consumer event handlers
   * @return  {Undefined} undefined
   * @private
   */


  _createClass(TopicConsumer, [{
    key: '_configureConsumer',
    value: function _configureConsumer() {
      var _this2 = this;

      delete this.client;
      delete this.consumer;

      var host = this.options.host;

      this.client = this.options.client || new Client(host);
      this.consumer = new HighLevelConsumer(this.client, this._fetchPayloads, this._consumerOptions);

      this.consumer.on('message', this.processMessage.bind(this));

      this.consumer.on('error', function (err) {
        _this2.emit('consumer:error', err);
        _this2.consumer.pause();
        _this2._rebuildConsumer();
      });

      this.consumer.on('offsetOutOfRange', function () {
        _this2.emit('consumer:offset-out-of-range');
      });
    }

    /**
     * Build the queue instance for this consumer
     * @param  {Number} concurrency - queue concurrency
     * @return  {Undefined} undefined
     * @private
     */

  }, {
    key: '_configureQueue',
    value: function _configureQueue() {
      var concurrency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

      this.queue = (0, _fastq2.default)(this._processTask.bind(this), concurrency);
      this.queue.drain = this._onQueueDrained.bind(this);
    }

    /**
     * Expose a connect method for waiting until underlying consumer has
     * reached a 'ready' state
     * @param  {Function} done - callback
     * @return  {Bluebird} bluebird
     */

  }, {
    key: 'connect',
    value: function connect() {
      var _this3 = this;

      var done = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _lodash.noop;

      this.emit('consumer:connecting');
      return new _bluebird2.default(function (resolve, reject) {
        var cleanup = function cleanup(err) {
          _this3.consumer.removeListener('registered', cleanup);
          _this3.consumer.removeListener('error', cleanup);
          if (err) {
            return reject(err);
          }
          _this3.emit('consumer:connected');
          return resolve();
        };
        _this3.consumer.on('registered', cleanup.bind(cleanup, null));
        _this3.consumer.on('error', cleanup);
      }).then(function () {
        _this3.emit('consumer:starting');
        _this3.consumer.resume();
        done();
      }).catch(function (err) {
        _this3.emit('consumer:error', err);
        _this3._rebuildConsumer(done);
      });
    }

    /**
     * Return detailed status Object
     * @return  {Object} status
     */

  }, {
    key: 'getStatus',
    value: function getStatus() {
      var _this4 = this;

      var defaultValues = {
        initialized: false,
        ready: false,
        closing: false,
        paused: false,
        rebalancing: false,
        topicPayloads: []
      };
      var consumer = (0, _lodash.reduce)(defaultValues, function (memo, val, attr) {
        var result = (0, _lodash.merge)({}, memo, _defineProperty({}, attr, (0, _lodash.get)(_this4, 'consumer.' + attr, val)));
        return result;
      }, {
        groupId: (0, _lodash.get)(this, 'consumer.options.groupId')
      });
      return {
        consumer: consumer,
        queue: {
          idle: this.queue.idle(),
          length: this.queue.length(),
          paused: this.queue.paused
        },
        status: consumer.ready && !consumer.closing && !this.queue.paused ? 'up' : 'down'
      };
    }

    /**
     * Handle queue drain event. Commit offsets and resume consuming messages.
     * @return  {Undefined} undefined
     * @private
     */

  }, {
    key: '_onQueueDrained',
    value: function _onQueueDrained() {
      var _this5 = this;

      this.consumer.commit(true, function (err) {
        if (err) {
          _this5.emit('consumer:commit-error', err);
        }
        _this5.emit('consumer:resuming');
        _this5.consumer.resume();
      });
    }

    /**
     * Parse a raw kafak message and append a new 'parsedValue' attribute
     * @param  {Object} raw - the raw kafka message emitted by the driver
     * @return  {Bluebird} bluebird
     */

  }, {
    key: 'processMessage',


    /**
     * Process a single message. Parse it and add it to the queue.
     * @param  {Object} raw - raw message
     * @return  {Undefined} undefined
     */
    value: function processMessage(raw) {
      var _this6 = this;

      // pause kafka consumer on first message
      if (!this.consumer.paused) {
        this.emit('consumer:pausing');
        this.consumer.pause();
      }
      // parse message and add it to queue
      var parseMessage = this.parse ? this.parse.bind(this) : TopicConsumer.parseMessage;
      parseMessage(raw).then(function (parsed) {
        _this6.queue.push(parsed, function (err) {
          if (err) {
            _this6.error = err;
            _this6.queue.kill();
          }
        });
      });
    }

    /**
     * Queue worker. Validate the parsed message, ignore it if invalid, otherwise
     * pass to all registered workers and pass if at least one resolves
     * @param  {Object} task - queue task
     * @param  {Function} done - callback
     * @return  {Bluebird} bluebird
     * @private
     */

  }, {
    key: '_processTask',
    value: function _processTask(task, done) {
      var _this7 = this;

      var validate = this.validate || _bluebird2.default.resolve;
      this.emit('message:processing', task);
      return validate(task).reflect().then(function (inspection) {
        if (inspection.isRejected()) {
          _this7.emit('message:skipped', task, inspection.reason());
          return _bluebird2.default.resolve();
        }
        var validated = inspection.value() || task;
        return _bluebird2.default.all(_this7.workers.map(function (worker) {
          return worker(validated);
        }));
      }).then(function (results) {
        _this7.emit('message:success', task, results);
        done();
      }).catch(function (err) {
        _this7.emit('message:error', err, task);
        done(err);
      });
    }

    /**
     * Rebuild the underlying consumer
     * @param  {Function} done - callback
     * @return  {Bluebird} bluebird
     * @private
     */

  }, {
    key: '_rebuildConsumer',
    value: function _rebuildConsumer(done) {
      var _this8 = this;

      this.emit('consumer:rebuild-initiated');
      _async2.default.series([
      // attempt to close existing consumer
      function (next) {
        if (!_this8.consumer) {
          return next();
        }
        var retryOptions = (0, _lodash.get)(_this8.options, 'rebuild.closing', {});
        (0, _lodash.defaults)(retryOptions, {
          retries: 2,
          minTimeout: (0, _ms2.default)('30s'),
          factor: 2
        });
        var operation = _retry2.default.operation(retryOptions);
        return operation.attempt(function () {
          _this8.consumer.close(true, function (err) {
            if (operation.retry(err)) {
              return;
            }
            if (err) {
              _this8.emit('consumer:closing-error', err);
            }
            next();
          });
        });
      },

      // schedule a rebuild in the near future
      function (next) {
        var delays = {
          min: (0, _lodash.get)(_this8.options, 'rebuild.minDelay'),
          max: (0, _lodash.get)(_this8.options, 'rebuild.maxDelay')
        };
        Object.keys(delays).forEach(function (delay) {
          if ((0, _lodash.isString)(delays[delay])) {
            delays[delay] = (0, _ms2.default)(delays[delay]);
          }
        });
        var delay = (0, _lodash.random)(delays.min, delays.max);
        _this8.emit('consumer:rebuild-scheduled', delay);
        setTimeout(function () {
          _this8.emit('consumer:rebuild-started');
          _this8._configureConsumer();
          _this8.connect(next);
        }, delay);
      }], done);
    }

    /**
     * Register a new worker function. Each worker function should be of the form
     * (parsedValue, log) => Bluebird
     * @param  {Function} worker - valid worker function
     * @return  {Undefined} undefined
     */

  }, {
    key: 'registerWorker',
    value: function registerWorker(worker) {
      _joi2.default.assert(worker, _joi2.default.func(2).required());
      this.workers.push(worker);
    }
  }], [{
    key: 'parseMessage',
    value: function parseMessage(raw) {
      return _bluebird2.default.try(function () {
        var parsed = (0, _lodash.merge)({}, raw, {
          parsedValue: JSON.parse(raw.value.toString('utf8'))
        });
        return parsed;
      });
    }
  }]);

  return TopicConsumer;
}(_events2.default);

exports.default = TopicConsumer;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,